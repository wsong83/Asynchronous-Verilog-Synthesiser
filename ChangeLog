##### Mon 15/10/2012
* New command report_dfg_path
      search and reports all the paths (IO/FF -> IO/FF) from a certain IO/FF to all/certain IO/FF.
* New command extract_regg
      generate a flattened register DFG from the hierarchical DFG
      it will be used to detect all FFs who has self-control loops (potential FSM)
* add capability in SDFG library to store paths, and search paths from a specified starting point
* regulate all printed informations using error No., so they can be suppressed by user
* remove cppPNML library from master branch

##### Sat 29/09/2012
* Nodes without output edges are removed (cross module boundry removal!)

##### Wed 26/09/2012
* New command uniquify
*     make sure all entities have a unique module
*     it is called automatically by extract_sdfg
* New tool: tool/sdfg2pdf
*     display the extracted DFG graph in pdf files

##### Sat 22/09/2012
* New command extract_sdfg
*     extract synchronous data-flow graph SDFG from a module
*     remove cppPNML library as TCPN is not used in the near future
*     add pugixml library back as a parser for the sdfg file

##### Thu 19/07/2012
* Merge dev back to master.
* Remove all parameters in the wriiten out netlist.
* Range reduction finished. No obvious effect in or1200 design.

##### Wed 18/07/2012
* Fixed several small bugs in display.
* The replacing of pre-lists to in-order expressions is finished.

##### Mon 16/07/2012
* Big change in expression and operation. Replace the pre-order equation list to in-order tree.
  It is a pain to handle pre-order list in stream and reduce.

##### Sun 15/07/2012
* Support width calculation in ranges.

##### Sat 14/07/2012
* width support in Netlist::Range and Netlist::RangeArray.
* Add get_width() and set_width() methods to all netlist components.

##### Fri 13/07/2012
* Fixed a bug in cpptcl which allow Tcl:interpreter to be used as a global object.

##### Thu 12/07/2012
* Merge dev back to master.
* Re-write some netlist::Number operations for more general supports of Number operation.

##### Wed 11/07/2012
* merge brach tcl to dev.
* Reimplement all commands using the new C++/Tcl library and the AVS shell env goes back to normal.

##### Tue 10/07/2012
* Expand the C++/Tcl library with extra support of user data, data type vector<string>, read & write Tcl variables.

##### Fri 06/07/2012
* kind of find out a way to handle Tcl list, the bloody bracket!
* Modify the argument parser and add add list checker & list breaker.
* "echo" and "help" are added back to AVS shell.

##### Thu 05/07/2012
* start further Tcl shell implementation.
* Finished the modification of c++/Tcl, now support ClientData field. It is merged back to AVS.

##### Mon 02/07/2012
* Seems have embedded the Tcl interpreter into my AVS environment.
* Implement the wrapper for Tcl interpreter.

##### Mon 02/07/2012
* Start a new branch "tcl" to replace the command line environment.
* Decide to use c++/tcl to re-implement the command line environment. Exciting!

##### Sun 01/07/2012
* Add short-cut effect to || operation.
* Add is_true(), is_false() and is_x() member function to Number to normalify the boolean check.

##### Sat 30/06/2012
* Add selector validation and select range check in the elaboration of VIdentifier.

##### Fri 29/06/2012
* Considering the range selector when settle resolve a const value from a variable (parameter or genvar).

##### Thu 28/06/2012
* Broadly exchange iterative for loop into BOOST_FOREACH macros.

##### Wed 27/06/2012
* Initialise father of netlist::ConElem to NULL (always forget this, dam!)
* Begin to use new BOOST_FOREACH macro.
* Now unused VIdentifiers will automatically expunge itself.
* Start to use a new branch for developing and only push runnable versions to master.

##### Tue 26/06/2012
* Rename the module name in instances after the module name is re-calculated with parameters.
* Added a write command in avs_shell to write out a design.

##### Mon 25/06/2012
* Modified Makefile so there is no target test.
* Fixed a stupid misuse of reference in netlist::RangeArray::is_declaration(). Reference assign is not pointer assignment!
* Fixed some bugs in case expression check and now consider numbers with x/z as constant and valuable.

##### Fri 22/06/2012
* Fixed some bugs and tried to differentiate empty from full by forcing all maximal range expandation before range
  operations.
* Find serious flaws in the range operation as it is difficult to differentiate empty ranges from full ranges.

##### Thu 21/06/2012
* Endless debugging for the range operation although no multi-dimension ranges are actually used in OR1200 RTL.
* Deduction of RangeArray is implemented.

##### Wed 20/06/2012 ( boring due to the routine work to rewrite inherited fuctions and parsers. )
* Imply complicated no-driver, multi-driver and no-load analysis on all veriable, although missing a deduction operation 
  on RangeArray right now.
* Provide out-of-range check to all variables.
* Modify the parser to use the new netlist::RangeArray.
* Modify the streamout facilities of netlist::Range, netlist::RangeArray and netlist::RangeArrayCommon.

##### Tue 19/06/2012 ( good! finaaly settled. and get a review request from IET CDT)
* Seems all internals of range related calsses are finished. So change other classes who use range expressions.
* Implement inherit methods in netlist::Range, netlist::RangeArray and netlist::RangeArrayCommon.

##### Mon 18/06/2012 ( better as find a way to do it )
* The major construction of range operations have been finished.
* op_deduct() in netlist::Range is rewritten along with op_normalise_tree().
* Seems like I have finally settle down how to implement range operations. Good!

##### Sun 17/06/2012 ( frustrated as there is the need to rewrite the third time for ranges!)
* Finally find out that it is kind impossible (or too difficult) to do range operations with variables when the maximal 
  range is unknown. However, when the maximal range is provided, all range expression can be reduced to const range which
  significantly reduce all calculations. The bad news is, all operations are going to be re-write for the third time in 
  these couple of weeks! 
* Add op_and in netlist::RangeArrayCommon for multi-dimension & operation.
* Add op_and_tree in netlist::Range for multi-dimension range & operation.

##### Sat 16/06/2012
* Rewrite >=, <= and == of netlist::Range.

##### Fri 15/06/2012
* Rewrite the & and | operations for netlist::Range to const functions as it will be too complicated to handle range 
  expressions with real VIdentifiers.
* Set up a new class netlist::RangeArrayCommon as the common base class of RangeArray and Range to handled the range array
  related operations, otherwise the same member function are to be defined twice.

##### Thu 14/06/2012
* Add a new class namely netlist::RangeArray to handled multi-dimension range operations. In process.
* Add &, |, >=, and - operation to netlist::Range classes.
* Add >, >=, <, <= to netlist::Number classes.

##### Wed 13/06/2012
* Add elaborate() to netlist::CaseState and netlist::CaseItem. Error types and result types are added accordingly.

##### Tue 12/06/2012
* Add removal and reduction in netlist::Block.
* Add another return value in elaborate(), elab_result_t result, to identifier the required operation in the upper level, 
  such as removal or further reduction.
* Fix the bug in reduce concatenations such as {32{1'b0}}.

##### Mon 11/06/2012
* Add elaborate() in netlist::SeqBlock, netlist::IfState, netlist::Block, netlist::Assign.
* Add ==, != and leading zero triming support for netlist::Number.
* Add a get_type_name() member function in Netlist::NetComp to show component type in string.

##### Sun 10/06/2012
* Fix the on-load error. The problem is fake and it should not stop the elaboration from proceeding further.

##### Sat 09/06/2012
* Add a function named multi_driver_checker() in netlist::Variable to handle the multi-driver check. However, this is far from 
  perfect. Different range selections in different always blocks will cause false alarms. This must be fixed, which means the 
  check should be run after generation blocks are unfolded.
* Add a set_always_pointer() member function to all NetComp classes. It is used to set the pointer to its father 
  netlist::SeqBlock, which will be used for multi-driver check.
* Able to add new modules to the elaboration list automatically.

##### Fri 08/06/2012
* Rewrite update_name() in Module to calculate_name(). Now it is a const function without any side effect in the module.

##### Thu 07/06/2012
* Fix the no-load problem.
* Fix the multiple driver problem, which is caused by uninitilised port directions in instances.
* Add update_ports() in Netlist::Instance to update the ports directions before db_register() in Netlist::Module::elaborate().
* Add find_port() in Netlist::Module.

##### Wed 06/06/2012
* Start to elaborate wires and registers. Have no-driver and multiple-driver bugs so far.
* Store the elaborated modules to the target work library and update the current_design if elaborate successfully.
* Fix the bug in reducing range expressions.
* Fix a bug in the deep_copy() of netlist::Port. As VIdentifier has range definitions inside, it needs to be deep_copied.
* Add a avs_shell command "report_netlist" to show the internals of a module or internal item.
* Show constant numbers in a range expression in the form of plain decimal number instead of fix-width number.
